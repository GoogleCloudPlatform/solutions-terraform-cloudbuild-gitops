# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


steps:
- id: 'branch name'
  name: 'alpine'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      echo "***********************"
      echo "Branch: $BRANCH_NAME"
      echo "Commit SHA: $COMMIT_SHA"
      echo "***********************"

- id: 'tf init'
  name: 'hashicorp/terraform:0.11.14'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      if [ -d "environments/test" ]; then
        cd environments/test
        terraform init -backend-config="bucket=$PROJECT_ID-tfstate" \
          -backend-config="prefix=env/$BRANCH_NAME"
      else
        echo "***************************** FAIL INIT *******************************"
        echo "environments/test does not exist."
        echo "*******************************************************************************"
        exit 1
      fi

# [START tf-plan]
- id: 'tf plan'
  name: 'hashicorp/terraform:0.11.14'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      if [ -d "environments/test/" ]; then
        cd environments/test
        terraform plan -var 'env=$BRANCH_NAME' -var 'project=$PROJECT_ID' -out=tf.plan
      else
        echo "***************************** FAIL PLANNING *******************************"
        echo "environments/test does not exist."
        echo "*******************************************************************************"
        exit 1
      fi
# [END tf-plan]

# [START tf-apply]
- id: 'tf apply'
  name: 'hashicorp/terraform:0.11.14'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      if [ -d "environments/test/" ]; then
        cd environments/test
        terraform apply -auto-approve tf.plan
      else
        echo "***************************** FAIL APPLYING *******************************"
        echo "environments/test does not exist."
        echo "*******************************************************************************"
        exit 1
      fi
# [END tf-apply]

# [START tf-show]
- id: 'tf show'
  name: 'hashicorp/terraform:0.11.14'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    if [ -d "environments/test/" ]; then
      cd environments/test
      terraform show > tf.show
      if [ -f tf.show ] ; then cat tf.show ; else exit 1 ; fi
    else
      echo "***************************** FAIL SHOWING *******************************"
      echo "environments/test does not exist."
      echo "*******************************************************************************"
      exit 1
    fi
# [END tf-show]

# [START docker build and push]
#- name: 'gcr.io/cloud-builders/docker'
#  dir: 'docker'
#  args: ['build', '-t', 'gcr.io/$PROJECT_ID/sample-test-driver', '.']
#- name: 'gcr.io/cloud-builders/docker'
#  dir: 'docker'
#  args: ['push', 'gcr.io/$PROJECT_ID/sample-test-driver']
# [END docker build and push]

- id: 'run tests'
  name: 'gcr.io/$PROJECT_ID/sample-test-driver'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      test/run_tests.sh $BRANCH_NAME environments/test/tf.show

# [START tf-destroy]
- id: 'tf destroy'
  name: 'hashicorp/terraform:0.11.14'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    if [ -d "environments/test/" ]; then
      cd environments/test
      terraform destroy -auto-approve -var 'env=$BRANCH_NAME' -var 'project=$PROJECT_ID'
    else
      echo "***************************** FAIL DESTROYING *******************************"
      echo "environments/test does not exist."
      echo "*******************************************************************************"
      exit 1
    fi
# [END tf-destroy]