# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


steps:
- id: 'branch name'
  name: 'alpine'
  entrypoint: 'sh'  
  args: 
  - '-c'
  - | 
      echo "***********************"
      echo "$BRANCH_NAME"
      echo "***********************"

- id: 'tf init'
  name: 'hashicorp/terraform:0.11.14'
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
      if [ -d "environments/test" ]; then
        terraform init -backend-config="bucket=$PROJECT_ID-tfstate" \
        -backend-config="prefix=env/$BRANCH_NAME" \
        environments/test
      else
        for dir in environments/*/
        do 
          cd ${dir}   
          env=${dir%*/}
          env=${env#*/}
          echo ""
          echo "*************** TERRAFORM INIT ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform init || exit 1
          cd ../../
        done
      fi 

# [START tf-plan]
- id: 'tf plan'
  name: 'hashicorp/terraform:0.11.14'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ -d "environments/test/" ]; then
        terraform plan -var 'env=$BRANCH_NAME' -var 'project=$PROJECT_ID' -out=tf.plan environments/test
      else
        for dir in environments/*/
        do 
          cd ${dir}   
          env=${dir%*/}
          env=${env#*/}  
          echo ""
          echo "*************** TERRAFOM PLAN ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform plan || exit 1
          cd ../../
        done
      fi 
# [END tf-plan]

# [START tf-apply]
- id: 'tf apply'
  name: 'hashicorp/terraform:0.11.14'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ -d "environments/test/" ]; then
        terraform apply -auto-approve tf.plan
      else
        echo "***************************** FAIL APPLYING *******************************"
        echo "environment/test does not exist."
        echo "*******************************************************************************"
        exit 1
      fi
# [END tf-apply]      

# [START tf-show]
- id: 'tf show'
  name: 'hashicorp/terraform:0.11.14'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    if [ -d "environments/test/" ]; then
      cd environments/test
      terraform show > tf.show
      cat tf.show
    else
      echo "***************************** FAIL SHOWING *******************************"
      echo "environment/test does not exist."
      echo "*******************************************************************************"
      exit 1
    fi
# [END tf-show]

# [START Running tests]
#- id: 'Running tests'
#  name: 'hashicorp/terraform:0.11.14'
#  entrypoint: 'sh'
#  args:
#  - '-c'
#  - |
#    if [ -d "tests/" ]; then
#      cd tests
#      SERV_IP=$(terraform_0.11.14 show | grep external_ip | awk '{ print $3}')
#      echo "$SERV_IP"
#      [ "$SERV_IP" == "" ] && exit 1
#
#      RESPONSE=$(curl "http://$SERV_IP/")
#      echo "$RESPONSE"
#
#      [ "$RESPONSE" == "<html><body><h1>Environment: $BRANCH_NAME</h1></body></html>" ] || exit 1
#    else
#      echo "***************************** SKIPPING TESTING *******************************"
#      echo "Branch '$BRANCH_NAME' does not represent an official environment for testing."
#      echo "*******************************************************************************"
#    fi
# [END Running tests]